import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var AES256 = /** @class */ (function (_super) {
    __extends(AES256, _super);
    function AES256() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256.pluginName = "AES256";
    AES256.plugin = "cordova-plugin-aes256-encryption";
    AES256.pluginRef = "cordova.plugins.AES256";
    AES256.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256.platforms = ["Android", "iOS"];
    AES256.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
AES256.ɵfac = function AES256_Factory(t) { return ɵAES256_BaseFactory(t || AES256); };
AES256.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AES256, factory: function (t) { return AES256.ɵfac(t); } });
var ɵAES256_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AES256);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AES256, [{
        type: Injectable
    }], null, null); })();
    return AES256;
}(IonicNativePlugin));
export { AES256 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYWVzLTI1Ni9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDeEU7QUFJVyxJQW1EaUIsMEJBQWlCO0FBQUM7QUFFOUI7QUFDZ0I7QUFBTSxJQU1wQyx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0FBS2hELElBT1Qsd0JBQU8sYUFBQyxTQUFpQixFQUFFLFFBQWdCLEVBQUUsSUFBWTtBQUtoRCxJQU1ULGtDQUFpQixhQUFDLFFBQWdCO0FBS2YsSUFNbkIsaUNBQWdCLGFBQUMsUUFBZ0I7QUFJVjtBQUFrQztBQUF3RDtBQUFpRDtBQUFnRTtBQUEyQzswQ0FoRDlRLFVBQVU7Ozs7OzBCQUNMO0FBQUMsaUJBekRQO0FBQUUsRUF5RDBCLGlCQUFpQjtBQUM1QyxTQURZLE1BQU07QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEFFUzI1NlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGNvcmRvdmEgaW9uaWMgcGx1Z2luIGFsbG93cyB5b3UgdG8gcGVyZm9ybSBBRVMgMjU2IGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gb24gdGhlIHBsYWluIHRleHQuXG4gKiBJdCdzIGEgY3Jvc3MtcGxhdGZvcm0gcGx1Z2luIHdoaWNoIHN1cHBvcnRzIGJvdGggQW5kcm9pZCBhbmQgaU9TLlxuICogVGhlIGVuY3J5cHRpb24gYW5kIGRlY3J5cHRpb24gYXJlIHBlcmZvcm1lZCBvbiB0aGUgZGV2aWNlIG5hdGl2ZSBsYXllciBzbyB0aGF0IHRoZSBwZXJmb3JtYW5jZSBpcyBtdWNoIGZhc3Rlci5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFFUzI1NiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYWVzLTI1Ni9uZ3gnO1xuICpcbiAqIHByaXZhdGUgc2VjdXJlS2V5OiBzdHJpbmc7XG4gKiBwcml2YXRlIHNlY3VyZUlWOiBzdHJpbmc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhZXMyNTY6IEFFUzI1Nikge1xuICogICAgdGhpcy5nZW5lcmF0ZVNlY3VyZUtleUFuZElWKCk7IC8vIFRvIGdlbmVyYXRlIHRoZSByYW5kb20gc2VjdXJlS2V5IGFuZCBzZWN1cmVJVlxuICogfVxuICpcbiAqIC4uLlxuICpcbiAqIGFzeW5jIGdlbmVyYXRlU2VjdXJlS2V5QW5kSVYoKSB7XG4gKiAgICB0aGlzLnNlY3VyZUtleSA9IGF3YWl0IHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlS2V5KCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKTsgLy8gUmV0dXJucyBhIDMyIGJ5dGVzIHN0cmluZ1xuICogICAgdGhpcy5zZWN1cmVJViA9IGF3YWl0IHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlSVYoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpOyAvLyBSZXR1cm5zIGEgMTYgYnl0ZXMgc3RyaW5nXG4gKiB9XG4gKlxuICogdGhpcy5hZXMyNTYuZW5jcnlwdCh0aGlzLnNlY3VyZUtleSwgdGhpcy5zZWN1cmVJViwgJ3Rlc3RkYXRhJylcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdFbmNyeXB0ZWQgRGF0YTogJyxyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiB0aGlzLmFlczI1Ni5kZWNyeXB0KHRoaXMuc2VjdXJlS2V5LCB0aGlzLnNlY3VyZUlWLCAnZW5jcnlwdGVkRGF0YScpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnRGVjcnlwdGVkIERhdGEgOiAnLHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqXG4gKiAqIHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlS2V5KCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ1NlY3VyZSBLZXkgOiAnLHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqXG4gKiAqIHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlSVYoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnU2VjdXJlIElWIDogJyxyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBRVMyNTYnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hZXMyNTYtZW5jcnlwdGlvbicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5BRVMyNTYnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0lkZWFzMklUL2NvcmRvdmEtYWVzMjU2JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tYWVzMjU2LWVuY3J5cHRpb24nLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBRVMyNTYgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gcGVyZm9ybSB0aGUgYWVzMjU2IGVuY3J5cHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUtleSBBIDMyIGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGlucHV0IGtleSBmb3IgQUVTMjU2IGVuY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVJViBBIDE2IGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGluaXRpYWwgdmVjdG9yIGZvciBBRVMyNTYgZW5jcnlwdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgQSBzdHJpbmcgd2hpY2ggd2lsbCBiZSBlbmNyeXB0ZWRcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZW5jcnlwdGlvbiBoYXBwZW5zLiBUaGUgc3VjY2VzcyByZXNwb25zZSB3aWxsIHJldHVybnMgZW5jcnlwdGVkIGRhdGEuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGVuY3J5cHQoc2VjdXJlS2V5OiBzdHJpbmcsIHNlY3VyZUlWOiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBwZXJmb3JtIHRoZSBhZXMyNTYgZGVjcnlwdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlS2V5IEEgMzIgYnl0ZXMgc3RyaW5nLCB3aGljaCB3aWxsIHVzZWQgYXMgaW5wdXQga2V5IGZvciBBRVMyNTYgZGVjcnlwdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUlWIEEgMTYgYnl0ZXMgc3RyaW5nLCB3aGljaCB3aWxsIHVzZWQgYXMgaW5pdGlhbCB2ZWN0b3IgZm9yIEFFUzI1NiBkZWNyeXB0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBBbiBBRVMyNTYgZW5jcnlwdGVkIGRhdGEgd2hpY2ggd2lsbCBiZSBkZWNyeXB0ZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGRlY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGRlY3J5cHRlZCBkYXRhLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkZWNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgYSBzZWN1cmUga2V5IGJhc2VkIG9uIGFuIHBhc3N3b3JkLiBQZXJmZWN0IGlmIHlvdSB3YW50IHRvIGRlbGVnYXRlIHRoZSBrZXkgZ2VuZXJhdGlvbiBmb3IgZW5jcnlwdGlvbiB0byB0aGUgcGx1Z2luLlxuICAgKiBNYWtlIHN1cmUgdG8gc2F2ZSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoaXMgZnVuY3Rpb24gc29tZXdoZXJlIHNvIHlvdXIgZW5jcnlwdGVkIGRhdGEgY2FuIGJlIGRlY3J5cHRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgQSByYW5kb20gc3RyaW5nLCB3aGljaCB3aWxsIGJlIHVzZWQgYXMgaW5wdXQgZm9yIGEgUEJLREYyIGZ1bmN0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGtleSBpcyBnZW5lcmF0ZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdlbmVyYXRlU2VjdXJlS2V5KHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgYSBzZWN1cmUgSVYgYmFzZWQgb24gYW4gcGFzc3dvcmQuIFBlcmZlY3QgaWYgeW91IHdhbnQgdG8gZGVsZWdhdGUgdGhlIElWIGdlbmVyYXRpb24gZm9yIGVuY3J5cHRpb24gdG8gdGhlIHBsdWdpbi5cbiAgICogTWFrZSBzdXJlIHRvIHNhdmUgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGZ1bmN0aW9uIHNvbWV3aGVyZSBzbyB5b3VyIGVuY3J5cHRlZCBkYXRhIGNhbiBiZSBkZWNyeXB0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIEEgcmFuZG9tIHN0cmluZywgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGlucHV0IGZvciBhIFBCS0RGMiBmdW5jdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBJViBpcyBnZW5lcmF0ZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdlbmVyYXRlU2VjdXJlSVYocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=