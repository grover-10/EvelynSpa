import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AES256 = /** @class */ (function (_super) {
    __extends(AES256, _super);
    function AES256() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256.pluginName = "AES256";
    AES256.plugin = "cordova-plugin-aes256-encryption";
    AES256.pluginRef = "cordova.plugins.AES256";
    AES256.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256.platforms = ["Android", "iOS"];
    AES256.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
    AES256.decorators = [
        { type: Injectable }
    ];
    return AES256;
}(IonicNativePlugin));
export { AES256 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Flcy0yNTYvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBd0Q1QywwQkFBaUI7Ozs7SUFTM0Msd0JBQU8sYUFBQyxTQUFpQixFQUFFLFFBQWdCLEVBQUUsSUFBWTtJQVl6RCx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBV3pELGtDQUFpQixhQUFDLFFBQWdCO0lBV2xDLGlDQUFnQixhQUFDLFFBQWdCOzs7Ozs7OztnQkE1Q2xDLFVBQVU7O2lCQXhEWDtFQXlENEIsaUJBQWlCO1NBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBBRVMyNTZcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBjb3Jkb3ZhIGlvbmljIHBsdWdpbiBhbGxvd3MgeW91IHRvIHBlcmZvcm0gQUVTIDI1NiBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uIG9uIHRoZSBwbGFpbiB0ZXh0LlxuICogSXQncyBhIGNyb3NzLXBsYXRmb3JtIHBsdWdpbiB3aGljaCBzdXBwb3J0cyBib3RoIEFuZHJvaWQgYW5kIGlPUy5cbiAqIFRoZSBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uIGFyZSBwZXJmb3JtZWQgb24gdGhlIGRldmljZSBuYXRpdmUgbGF5ZXIgc28gdGhhdCB0aGUgcGVyZm9ybWFuY2UgaXMgbXVjaCBmYXN0ZXIuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBRVMyNTYgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Flcy0yNTYvbmd4JztcbiAqXG4gKiBwcml2YXRlIHNlY3VyZUtleTogc3RyaW5nO1xuICogcHJpdmF0ZSBzZWN1cmVJVjogc3RyaW5nO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYWVzMjU2OiBBRVMyNTYpIHtcbiAqICAgIHRoaXMuZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpOyAvLyBUbyBnZW5lcmF0ZSB0aGUgcmFuZG9tIHNlY3VyZUtleSBhbmQgc2VjdXJlSVZcbiAqIH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBhc3luYyBnZW5lcmF0ZVNlY3VyZUtleUFuZElWKCkge1xuICogICAgdGhpcy5zZWN1cmVLZXkgPSBhd2FpdCB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUtleSgncmFuZG9tIHBhc3N3b3JkIDEyMzQ1Jyk7IC8vIFJldHVybnMgYSAzMiBieXRlcyBzdHJpbmdcbiAqICAgIHRoaXMuc2VjdXJlSVYgPSBhd2FpdCB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUlWKCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKTsgLy8gUmV0dXJucyBhIDE2IGJ5dGVzIHN0cmluZ1xuICogfVxuICpcbiAqIHRoaXMuYWVzMjU2LmVuY3J5cHQodGhpcy5zZWN1cmVLZXksIHRoaXMuc2VjdXJlSVYsICd0ZXN0ZGF0YScpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnRW5jcnlwdGVkIERhdGE6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogdGhpcy5hZXMyNTYuZGVjcnlwdCh0aGlzLnNlY3VyZUtleSwgdGhpcy5zZWN1cmVJViwgJ2VuY3J5cHRlZERhdGEnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0RlY3J5cHRlZCBEYXRhIDogJyxyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKlxuICogKiB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUtleSgncmFuZG9tIHBhc3N3b3JkIDEyMzQ1JylcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdTZWN1cmUgS2V5IDogJyxyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKlxuICogKiB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUlWKCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ1NlY3VyZSBJViA6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQUVTMjU2JyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYWVzMjU2LWVuY3J5cHRpb24nLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuQUVTMjU2JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9JZGVhczJJVC9jb3Jkb3ZhLWFlczI1NicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWFlczI1Ni1lbmNyeXB0aW9uJyxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQUVTMjU2IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBlcmZvcm0gdGhlIGFlczI1NiBlbmNyeXB0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVLZXkgQSAzMiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbnB1dCBrZXkgZm9yIEFFUzI1NiBlbmNyeXB0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlSVYgQSAxNiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbml0aWFsIHZlY3RvciBmb3IgQUVTMjU2IGVuY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIEEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgZW5jcnlwdGVkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGVuY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGVuY3J5cHRlZCBkYXRhLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBlbmNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gcGVyZm9ybSB0aGUgYWVzMjU2IGRlY3J5cHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUtleSBBIDMyIGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGlucHV0IGtleSBmb3IgQUVTMjU2IGRlY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVJViBBIDE2IGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGluaXRpYWwgdmVjdG9yIGZvciBBRVMyNTYgZGVjcnlwdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgQW4gQUVTMjU2IGVuY3J5cHRlZCBkYXRhIHdoaWNoIHdpbGwgYmUgZGVjcnlwdGVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBkZWNyeXB0aW9uIGhhcHBlbnMuIFRoZSBzdWNjZXNzIHJlc3BvbnNlIHdpbGwgcmV0dXJucyBkZWNyeXB0ZWQgZGF0YS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGVjcnlwdChzZWN1cmVLZXk6IHN0cmluZywgc2VjdXJlSVY6IHN0cmluZywgZGF0YTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIGEgc2VjdXJlIGtleSBiYXNlZCBvbiBhbiBwYXNzd29yZC4gUGVyZmVjdCBpZiB5b3Ugd2FudCB0byBkZWxlZ2F0ZSB0aGUga2V5IGdlbmVyYXRpb24gZm9yIGVuY3J5cHRpb24gdG8gdGhlIHBsdWdpbi5cbiAgICogTWFrZSBzdXJlIHRvIHNhdmUgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGZ1bmN0aW9uIHNvbWV3aGVyZSBzbyB5b3VyIGVuY3J5cHRlZCBkYXRhIGNhbiBiZSBkZWNyeXB0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIEEgcmFuZG9tIHN0cmluZywgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGlucHV0IGZvciBhIFBCS0RGMiBmdW5jdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBrZXkgaXMgZ2VuZXJhdGVkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVNlY3VyZUtleShwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIGEgc2VjdXJlIElWIGJhc2VkIG9uIGFuIHBhc3N3b3JkLiBQZXJmZWN0IGlmIHlvdSB3YW50IHRvIGRlbGVnYXRlIHRoZSBJViBnZW5lcmF0aW9uIGZvciBlbmNyeXB0aW9uIHRvIHRoZSBwbHVnaW4uXG4gICAqIE1ha2Ugc3VyZSB0byBzYXZlIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhpcyBmdW5jdGlvbiBzb21ld2hlcmUgc28geW91ciBlbmNyeXB0ZWQgZGF0YSBjYW4gYmUgZGVjcnlwdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBBIHJhbmRvbSBzdHJpbmcsIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBpbnB1dCBmb3IgYSBQQktERjIgZnVuY3Rpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gSVYgaXMgZ2VuZXJhdGVkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVNlY3VyZUlWKHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19